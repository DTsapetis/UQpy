import pytest
from beartype.roar import BeartypeCallHintPepParamException

from UQpy.distributions.collection import *
from UQpy.utilities.strata.Rectangular import *
from UQpy.utilities.strata.Voronoi import *
from UQpy.sampling.StratifiedSampling import *
from UQpy.utilities.strata.Delaunay import *


def test_rectangular_sts():
    marginals = [Uniform(loc=0., scale=1.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[4, 4])
    x = StratifiedSampling(distributions=marginals, strata_object=strata,
                           samples_per_stratum_number=1, random_state=1)
    assert x.samples[6, 0] == 0.5511130624328794
    assert x.samples[12, 1] == 0.9736516658759619
    assert x.samples[2, 0] == 0.5366889727042783
    assert x.samples[9, 1] == 0.5495253722712197


def test_delaunay_sts():
    marginals = [Exponential(loc=1., scale=1.), Exponential(loc=1., scale=1.)]
    seeds = np.array([[0, 0], [0.4, 0.8], [1, 0], [1, 1]])
    strata_obj = Delaunay(seeds=seeds)
    sts_obj = StratifiedSampling(distributions=marginals, strata_object=strata_obj,
                                 samples_per_stratum_number=1, random_state=1)
    assert sts_obj.samples[2, 0] == 1.902581742436106


def test_voronoi_sts():
    marginals = [Exponential(loc=1., scale=1.), Exponential(loc=1., scale=1.)]
    strata = Voronoi(seeds_number=8, dimension=2)
    x = StratifiedSampling(distributions=marginals, strata_object=strata,
                           samples_per_stratum_number=3, random_state=3)
    assert x.samples[7, 0] == 3.6928440862661223
    assert x.samples[20, 1] == 1.1555963246730931
    assert x.samples[1, 0] == 1.8393015015282757
    assert x.samples[15, 1] == 2.117727620746169


# Rectangular
marginals = [Exponential(loc=1., scale=1.), Exponential(loc=1., scale=1.)]
strata = Rectangular(strata_number=[3, 3])

nsamples_per_stratum = [1]*9
nsamples_per_stratum[4] = 0
x_sts = StratifiedSampling(distributions=marginals, strata_object=strata,
                           samples_per_stratum_number=nsamples_per_stratum, random_state=1)
strata1 = Rectangular(strata_number=[3, 3], stratification_criterion=StratificationCriterion.CENTERED)
x_sts1 = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)

# Voronoi
strata_vor = Voronoi(seeds_number=8, dimension=2)
sts_vor = StratifiedSampling(distributions=marginals, strata_object=strata_vor, random_state=3)
sts_vor.run(samples_per_stratum_number=1)

strata_vor1 = Voronoi(seeds_number=8, dimension=2)
sts_vor2 = StratifiedSampling(distributions=marginals, strata_object=strata_vor1, random_state=3)
sts_vor2.run(samples_number=8, samples_per_stratum_number=1)
sts_vor2.run()


# Delaunay
seeds = np.array([[0, 0], [0.4, 0.8], [1, 0], [1, 1]])
strata_del = Delaunay(seeds=seeds)
sts_del = StratifiedSampling(distributions=marginals, strata_object=strata_del,random_state=2)
sts_del.run(samples_per_stratum_number=2)



# Unit tests
def test_rect_random():
    """
    Test the samples generated by 3x3 rectangular strata, with random points
    """
    tmp1 = (np.round(x_sts.samples, 3) == np.array([[1.187, 1.381], [1.48, 1.38], [2.472, 1.152], [1.323, 1.634],
                                                    [2.896, 1.419], [1.289, 2.871], [1.586, 3.652],
                                                    [2.46, 2.703]])).all()
    tmp2 = (np.round(x_sts.samplesU01, 3) == np.array([[0.171, 0.317], [0.381, 0.316], [0.771, 0.141], [0.276, 0.47],
                                                       [0.85, 0.343], [0.251, 0.846], [0.443, 0.929],
                                                       [0.768, 0.818]])).all()
    assert tmp1 and tmp2


def test_rect_centered():
    """
    Test the samples generated by 3x3 rectangular strata, with centered points
    """
    tmp1 = (np.round(x_sts1.samples, 3) == np.array([[1.182, 1.182], [1.693, 1.182], [2.792, 1.182], [1.182, 1.693],
                                                    [1.693, 1.693], [2.792, 1.693], [1.182, 2.792], [1.693, 2.792],
                                                    [2.792, 2.792]])).all()
    tmp2 = (np.round(x_sts1.samplesU01, 3) == np.array([[0.167, 0.167], [0.5, 0.167], [0.833, 0.167], [0.167, 0.5],
                                                        [0.5, 0.5], [0.833, 0.5], [0.167, 0.833], [0.5, 0.833],
                                                        [0.833, 0.833]])).all()
    assert tmp1 and tmp2


def test_rect_sts_criterion():
    """
        Test the 'sts_criterion' attribute for RectangularSTS class.
    """
    with pytest.raises(AttributeError):
        Rectangular(stratification_criterion=StratificationCriterion.aaa)


def test_rect_strata_object():
    """
        Test type of strata_object. It should be a RectangularStrata object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        StratifiedSampling(distributions=marginals, strata_object=None, samples_per_stratum_number=1)


def test_rect_nsamples_check1():
    """
        In case of centered sampling, nsamples should be equal to number of strata in strata_object.
    """
    with pytest.raises(ValueError):
        strata.stratification_criterion=StratificationCriterion.CENTERED
        StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1,
                           samples_number=10)


def test_vor_nsamples_per_strarum_not_0():
    """
        Test samples and weights of the class object, when all stratum has atleast 1 sample.
    """
    tmp1 = (np.round(sts_vor.samples, 3) == np.array([[1.101, 1.362], [2.658, 1.81], [1.207, 1.585], [1.383, 1.108],
                                                      [2.445, 1.091], [1.82, 1.502], [1.248, 3.714],
                                                      [1.972, 3.228]])).all()
    tmp2 = (np.round(sts_vor.weights, 3) == np.array([0.091, 0.166, 0.117, 0.117, 0.132, 0.077, 0.175, 0.125])).all()
    assert tmp1 and tmp2


def test_vor_strata_object():
    """
        Test type of strata_object. It should be a VoronoiStrata object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        StratifiedSampling(distributions=marginals, strata_object=None)


def test_vor_random_state():
    """
        Check 'random_state' is an integer or RandomState object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        StratifiedSampling(distributions=marginals, strata_object=strata_vor, random_state='abc')


def test_vor_dist_object():
    """
        Check 'dist_object' is a Distribution object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        StratifiedSampling(distributions=[2, 1], strata_object=strata_vor)


def test_vor_dist_object2():
    """
        Check 'dist_object' is a Distribution object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        StratifiedSampling(distributions=2, strata_object=strata_vor)


def test_voronoi_nsamples_check():
    """
        In case of centered sampling, nsamples should be equal to number of strata in strata_object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        sts_vor.run(samples_number='abc')


def test_voronoi_nsamples_per_stratum_check():
    """
        Check length of nsamples_per_stratum should be equal to number of strata in strata_object.
    """
    with pytest.raises(ValueError):
        sts_vor.run(samples_per_stratum_number=[2, 1, 0, 1])


def test_voronoi_nsamples_per_stratum_check2():
    """
        Check nsamples_per_stratum should an integer or list.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        sts_vor.run(samples_per_stratum_number='abc')


def test_del_nsamples_per_strarum_not_0():
    """
        Test samples and weights of the class object, when all stratum has atleast 1 sample.
    """
    tmp1 = (np.round(sts_del.samples, 3) == np.array([[1.211, 1.821], [1.105, 2.817], [1.561, 1.191], [1.589, 1.212],
                                                      [1.383, 6.719], [2.074, 3.592], [2.757, 2.027],
                                                      [3.063, 1.255]])).all()
    tmp2 = (np.round(sts_del.weights, 3) == np.array([0.1, 0.1, 0.2, 0.2, 0.05, 0.05, 0.15, 0.15])).all()
    assert tmp1 and tmp2


def test_del_strata_object():
    """
        Test type of strata_object. It should be a DelaunayStrata object.
    """
    with pytest.raises(BeartypeCallHintPepParamException):
        StratifiedSampling(distributions=marginals, strata_object=None)
