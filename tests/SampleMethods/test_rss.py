import numpy as np
import pytest
from beartype.roar import BeartypeCallHintPepParamException

from UQpy import GradientEnhancedRefinement
from UQpy.distributions.collection.Uniform import Uniform
from UQpy.utilities.strata.Rectangular import Rectangular
from UQpy.sampling.RefinedStratifiedSampling import *
from UQpy.sampling.refined_stratified_sampling.SimpleRefinement import *
from UQpy.utilities.strata.Voronoi import *
from UQpy.RunModel import *
from UQpy.surrogates.kriging.Kriging import Kriging

import shutil


def test_rss_simple_rectangular():
    marginals = [Uniform(loc=0., scale=1.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[4, 4])
    x = StratifiedSampling(distributions=marginals, strata_object=strata,
                           samples_per_stratum_number=1, random_state=1)
    algorithm = SimpleRefinement(strata)
    y = RefinedStratifiedSampling(stratified_sampling=x,
                                  samples_number=18,
                                  samples_per_iteration=2,
                                  refinement_algorithm=algorithm,
                                  random_state=2)
    assert y.samples[16, 0] == 0.06614276178462988
    assert y.samples[16, 1] == 0.7836449863362334
    assert y.samples[17, 0] == 0.1891972651582183
    assert y.samples[17, 1] == 0.2961099664117288


def test_rss_simple_voronoi():
    marginals = [Uniform(loc=0., scale=1.), Uniform(loc=0., scale=1.)]
    strata = Voronoi(seeds_number=16, dimension=2)
    x = StratifiedSampling(distributions=marginals, strata_object=strata,
                           samples_per_stratum_number=1, random_state=1)
    algorithm = SimpleRefinement(strata)
    y = RefinedStratifiedSampling(stratified_sampling=x,
                                  samples_number=18,
                                  samples_per_iteration=2,
                                  refinement_algorithm=algorithm,
                                  random_state=2)
    assert y.samples[16, 0] == 0.44328265744393724
    assert y.samples[16, 1] == 0.4072924210691123
    assert y.samples[17, 0] == 0.3507629313878089
    assert y.samples[17, 1] == 0.17076741629044234


def test_rect_rss():
    """
    Test the 6 samples generated by RSS using rectangular stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[2, 2])
    x = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)
    y = RefinedStratifiedSampling(stratified_sampling=x, samples_number=6, samples_per_iteration=2, random_state=2,
                                  refinement_algorithm=SimpleRefinement(strata=strata))
    assert np.allclose(y.samples, np.array([[0.417022, 0.36016225], [1.00011437, 0.15116629],
                                            [0.14675589, 0.5461693], [1.18626021, 0.67278036],
                                            [0.77483124, 0.7176612], [1.7101839, 0.66516741]]))
    assert np.allclose(np.array(y.samplesU01), np.array([[0.208511, 0.36016225], [0.50005719, 0.15116629],
                                                         [0.07337795, 0.5461693], [0.59313011, 0.67278036],
                                                         [0.38741562, 0.7176612], [0.85509195, 0.66516741]]))


def test_rect_gerss():
    """
    Test the 6 samples generated by GE-RSS using rectangular stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[2, 2])
    x = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)
    rmodel = RunModel(model_script='python_model_function.py', vec=False)
    from UQpy.surrogates.kriging.regression_models import Linear
    from UQpy.surrogates.kriging.correlation_models import Exponential

    K = Kriging(regression_model=Linear(), correlation_model=Exponential(), optimizations_number=20,
                correlation_model_parameters=[1, 1])
    K.fit(samples=x.samples, values=rmodel.qoi_list)
    refinement = GradientEnhancedRefinement(strata=x.strata_object, runmodel_object=rmodel,
                                            surrogate=K, nearest_points_number=4)
    z = RefinedStratifiedSampling(stratified_sampling=x, random_state=2, refinement_algorithm=refinement)
    z.run(samples_number=6)
    assert np.allclose(z.samples, np.array([[0.417022, 0.36016225], [1.00011437, 0.15116629],
                                            [0.14675589, 0.5461693], [1.18626021, 0.67278036],
                                            [1.59254104, 0.96577043], [0.97386531, 0.24237455]]))
    assert np.allclose(z.samplesU01, np.array([[0.208511, 0.36016225], [0.50005719, 0.15116629],
                                               [0.07337795, 0.5461693], [0.59313011, 0.67278036],
                                               [0.79627052, 0.96577043], [0.48693265, 0.24237455]]))


def test_vor_rss():
    """
    Test the 6 samples generated by RSS using voronoi stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata_vor = Voronoi(seeds_number=4, dimension=2)
    x_vor = StratifiedSampling(distributions=marginals, strata_object=strata_vor, samples_per_stratum_number=1,
                               random_state=10)
    y_vor = RefinedStratifiedSampling(stratified_sampling=x_vor, samples_number=6, samples_per_iteration=2,
                                      random_state=0,
                                      refinement_algorithm=SimpleRefinement(strata=x_vor.strata_object))
    assert np.allclose(y_vor.samples, np.array([[1.78345908, 0.01640854], [1.46201137, 0.70862104],
                                              [0.4021338,  0.05290083], [0.1062376,  0.88958226],
                                              [0.61246269, 0.47160095], [0.85778034, 0.72123075]]))
    # to provlhma einai sto refinement
    assert np.allclose(y_vor.samplesU01 == np.array([[0.89172954, 0.01640854], [0.73100569, 0.70862104],
                                                     [0.2010669, 0.05290083], [0.0531188,  0.88958226],
                                                     [0.30623134, 0.47160095], [0.42889017, 0.72123075]]))
    # to provlhma einai sto refinement


def test_vor_gerss():
    """
    Test the 6 samples generated by GE-RSS using voronoi stratification
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata_vor = Voronoi(seeds_number=4, dimension=2)
    x_vor = StratifiedSampling(distributions=marginals, strata_object=strata_vor, samples_per_stratum_number=1,
                               random_state=10)
    from UQpy.surrogates.kriging.regression_models.Linear import Linear
    from UQpy.surrogates.kriging.correlation_models.Exponential import Exponential
    rmodel_ = RunModel(model_script='python_model_function.py', vec=False)
    K_ = Kriging(regression_model=Linear(), correlation_model=Exponential(), optimizations_number=20,
                 correlation_model_parameters=[1, 1])

    K_.fit(samples=x_vor.samples, values=rmodel_.qoi_list)
    z_vor = RefinedStratifiedSampling(stratified_sampling=x_vor, samples_number=6, random_state=x_vor.random_state,
                                      refinement_algorithm=GradientEnhancedRefinement(strata=x_vor.strata_object,
                                                                                      runmodel_object=rmodel_,
                                                                                      surrogate=K_,
                                                                                      nearest_points_number=4))
    tmp1 = (np.round(z_vor.samples, 3) == np.array([[1.563, 0.458], [1.741, 0.048], [0.757, 0.246], [0.396, 0.678],
                                                    [1.077, 0.676], [0.503, 0.873]])).all()
    tmp2 = (np.round(z_vor.samplesU01, 3) == np.array([[0.782, 0.458], [0.87, 0.048], [0.379, 0.246], [0.198, 0.678],
                                                       [0.538, 0.676], [0.252, 0.873]])).all()
    assert tmp1 and tmp2


def test_rss_random_state():
    """
        Check 'random_state' is an integer or RandomState object.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[2, 2])
    x = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)
    with pytest.raises(BeartypeCallHintPepParamException):
        RefinedStratifiedSampling(stratified_sampling=x, samples_number=6, samples_per_iteration=2, random_state='abc',
                                  refinement_algorithm=SimpleRefinement(x.strata_object))


def test_rss_runmodel_object():
    """
        Check 'runmodel_object' should be a UQpy.RunModel class object.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[2, 2])
    x = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)
    from UQpy.surrogates.kriging.regression_models import Linear
    from UQpy.surrogates.kriging.correlation_models import Exponential

    K = Kriging(regression_model=Linear(), correlation_model=Exponential(), optimizations_number=20,
                correlation_model_parameters=[1, 1])
    rmodel = RunModel(model_script='python_model_function.py', vec=False)
    K.fit(samples=x.samples, values=rmodel.qoi_list)
    with pytest.raises(BeartypeCallHintPepParamException):
        refinement = GradientEnhancedRefinement(strata=x.strata_object, runmodel_object='abc',
                                                surrogate=K)
        RefinedStratifiedSampling(stratified_sampling=x, samples_number=6, samples_per_iteration=2,
                                  refinement_algorithm=refinement)


def test_rss_kriging_object():
    """
        Check 'kriging_object', it should have 'fit' and 'predict' methods.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[2, 2])
    x = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)
    rmodel_ = RunModel(model_script='python_model_function.py', vec=False)
    with pytest.raises(BeartypeCallHintPepParamException):
        refinement = GradientEnhancedRefinement(strata=x.strata_object, runmodel_object=rmodel_,
                                                surrogate="abc")
        RefinedStratifiedSampling(stratified_sampling=x, samples_number=6, samples_per_iteration=2,
                                  refinement_algorithm=refinement)


def test_nsamples():
    """
        Check 'nsamples' attributes, it should be an integer.
    """
    marginals = [Uniform(loc=0., scale=2.), Uniform(loc=0., scale=1.)]
    strata = Rectangular(strata_number=[2, 2])
    x = StratifiedSampling(distributions=marginals, strata_object=strata, samples_per_stratum_number=1, random_state=1)
    with pytest.raises(BeartypeCallHintPepParamException):
        RefinedStratifiedSampling(stratified_sampling=x, samples_number='a', samples_per_iteration=2,
                                  refinement_algorithm=SimpleRefinement(x.strata_object))
