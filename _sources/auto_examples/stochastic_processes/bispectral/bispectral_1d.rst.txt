
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/stochastic_processes/bispectral/bispectral_1d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_stochastic_processes_bispectral_bispectral_1d.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_stochastic_processes_bispectral_bispectral_1d.py:


BiSpectral Representation Method - 1D
=================================================================

In this example, the BiSpectral Representation Method is used to generate stochastic processes from a prescribed Power
Spectrum and associated Bispectrum. This example illustrates how to use the BSRM class for one dimensional case and
compare the statistics of the generated stochastic processes with the expected values.

.. GENERATED FROM PYTHON SOURCE LINES 13-15

Import the necessary libraries. Here we import standard libraries such as numpy and matplotlib, but also need to
import the :class:`.BispectralRepresentation` class from the :py:mod:`stochastic_processes` module of UQpy.

.. GENERATED FROM PYTHON SOURCE LINES 18-25

.. code-block:: Python


    from UQpy.stochastic_process import BispectralRepresentation
    import numpy as np
    from scipy.stats import skew
    import matplotlib.pyplot as plt
    plt.style.use('seaborn')


.. GENERATED FROM PYTHON SOURCE LINES 26-27

The input parameters necessary for the generation of the stochastic processes are given below:

.. GENERATED FROM PYTHON SOURCE LINES 30-47

.. code-block:: Python


    n_sim = 10000  # Num of samples

    n = 1 # Num of dimensions

    # Input parameters
    T = 60  # Time(1 / T = dw)
    nt = 1200  # Num.of Discretized Time
    F = 1 / T * nt / 2  # Frequency.(Hz)
    nf = 600  # Num of Discretized Freq.

    # # Generation of Input Data(Stationary)
    dt = T / nt
    t = np.linspace(0, T - dt, nt)
    df = F / nf
    f = np.linspace(0, F - df, nf)


.. GENERATED FROM PYTHON SOURCE LINES 48-49

Defining the Power Spectral Density(S)

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: Python


    S = 32 * 1 / np.sqrt(2 * np.pi) * np.exp(-1 / 2 * f ** 2)


.. GENERATED FROM PYTHON SOURCE LINES 56-57

Generating the 2 dimensional mesh grid

.. GENERATED FROM PYTHON SOURCE LINES 60-74

.. code-block:: Python


    fx = f
    fy = f
    Fx, Fy = np.meshgrid(f, f)

    b = 95 * 2 * 1 / (2 * np.pi) * np.exp(2 * (-1 / 2 * (Fx ** 2 + Fy ** 2)))
    B_Real = b
    B_Imag = b

    B_Real[0, :] = 0
    B_Real[:, 0] = 0
    B_Imag[0, :] = 0
    B_Imag[:, 0] = 0


.. GENERATED FROM PYTHON SOURCE LINES 75-76

Defining the Bispectral Density(B)

.. GENERATED FROM PYTHON SOURCE LINES 79-83

.. code-block:: Python


    B_Complex = B_Real + 1j * B_Imag
    B_Ampl = np.absolute(B_Complex)


.. GENERATED FROM PYTHON SOURCE LINES 84-85

Make sure that the input parameters are in order to prevent aliasing

.. GENERATED FROM PYTHON SOURCE LINES 88-107

.. code-block:: Python


    t_u = 2*np.pi/2/F

    if dt>t_u:
        print('Error')

    BSRM_object = BispectralRepresentation(n_sim, S, B_Complex, [dt], [df], [nt], [nf])
    samples = BSRM_object.samples

    fig, ax = plt.subplots()
    plt.title('Realisation of the BiSpectral Representation Method')
    plt.plot(t, samples[0, 0])
    ax.yaxis.grid(True)
    ax.xaxis.grid(True)
    plt.show()

    print('The mean of the samples is ', np.mean(samples), 'whereas the expected mean is 0.000')
    print('The variance of the samples is ', np.var(samples), 'whereas the expected variance is ', np.sum(S)*df*2)
    print('The skewness of the samples is ', np.mean(skew(samples, axis=0)), 'whereas the expected skewness is ',
          np.sum(B_Real)*df**2*6/(np.sum(S)*df*2)**(3/2))

.. _sphx_glr_download_auto_examples_stochastic_processes_bispectral_bispectral_1d.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/SURGroup/UQpy/master?urlpath=lab/tree/notebooks/auto_examples/stochastic_processes/bispectral/bispectral_1d.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: bispectral_1d.ipynb <bispectral_1d.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: bispectral_1d.py <bispectral_1d.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: bispectral_1d.zip <bispectral_1d.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
