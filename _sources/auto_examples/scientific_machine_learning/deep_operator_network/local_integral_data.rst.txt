
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/scientific_machine_learning/deep_operator_network/local_integral_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_scientific_machine_learning_deep_operator_network_local_integral_data.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_scientific_machine_learning_deep_operator_network_local_integral_data.py:


Data generation fuction for DeepONet examples
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 5-45

.. code-block:: Python


    import torch
    import numpy as np
    from UQpy.stochastic_process import SpectralRepresentation


    def srm_2d_samples(n_samples: int) -> tuple[torch.Tensor, torch.Tensor]:
        """Sample a 2D Gaussian process using the Spectral Representation Method

        :param n_samples: Number of samples. Each sample is one row
        :return: time, samples
        """
        n_dimension = 2
        max_time = np.array([1.0, 2.0])
        n_time = np.array([50, 100])
        max_frequency = np.array([8 * np.pi, 4 * np.pi])
        n_frequency = np.array([64, 32])

        delta_time = max_time / n_time
        delta_frequency = max_frequency / n_frequency

        frequency_vectors = [
            np.linspace(0, max_frequency[i] - delta_frequency[i], n=n_frequency[i])
            for i in range(n_dimension)
        ]
        frequency = np.array(np.meshgrid(*frequency_vectors, indexing="ij"))
        time_vectors = [
            np.linspace(0, max_time[i] - delta_time[i], num=n_time[i])
            for i in range(n_dimension)
        ]
        time = np.array(np.meshgrid(*time_vectors, indexing="ij"))

        power_spectrum = np.exp(-2 * np.linalg.norm(frequency, axis=0))
        srm = SpectralRepresentation(
            n_samples, power_spectrum, delta_time, delta_frequency, n_time, n_frequency
        )
        return (
            torch.tensor(time, dtype=torch.float).reshape(-1, 2),
            torch.tensor(srm.samples, dtype=torch.float),
        )


.. _sphx_glr_download_auto_examples_scientific_machine_learning_deep_operator_network_local_integral_data.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/SURGroup/UQpy/master?urlpath=lab/tree/notebooks/auto_examples/scientific_machine_learning/deep_operator_network/local_integral_data.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: local_integral_data.ipynb <local_integral_data.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: local_integral_data.py <local_integral_data.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: local_integral_data.zip <local_integral_data.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
