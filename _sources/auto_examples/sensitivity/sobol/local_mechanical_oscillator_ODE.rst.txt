
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sensitivity/sobol/local_mechanical_oscillator_ODE.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sensitivity_sobol_local_mechanical_oscillator_ODE.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sensitivity_sobol_local_mechanical_oscillator_ODE.py:


Auxiliary file
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 7-61

.. code-block:: Python


    import numpy as np
    from scipy.integrate import solve_ivp


    def mech_oscillator(input_parameters):
        """
        We have the second order differential equation:

        .. math::

            m \ddot{x} + c \dot{x} + k x = 0

        with initial conditions: :math: `x(0) = \ell`, :math: `\dot{x}(0) = 0`.

        where, for example  :math: `m \sim \mathcal{U}(10, 12)`,
                            :math: `c \sim \mathcal{U}(0.4, 0.8)`
                            :math: `k \sim \mathcal{U}(70, 90)`
                            :math: `\ell \sim \mathcal{U}(-1, -0.25)`.


        References
        ----------

        .. [1] Gamboa F, Janon A, Klein T, Lagnoux A, others .
            Sensitivity analysis for multidimensional and functional outputs.
            Electronic journal of statistics 2014; 8(1): 575-603.

        """

        # unpack the input parameters
        m, c, k, l = input_parameters[0]

        # intial conditions
        x_0 = l
        v_0 = 0

        # time points
        t_0 = 0
        t_f = 40
        dt = 0.05
        n_t = int((t_f - t_0) / dt)
        T = np.linspace(t_0, t_f, n_t)

        def ODE(t, y):
            """
            The ODE system.
            """
            return np.array([y[1], -(k / m) * y[0] - (c / m) * y[1]])

        # solve the ODE
        sol = solve_ivp(ODE, [t_0, t_f], [x_0, v_0], method="RK45", t_eval=T)

        return sol.y[0]


.. _sphx_glr_download_auto_examples_sensitivity_sobol_local_mechanical_oscillator_ODE.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/SURGroup/UQpy/master?urlpath=lab/tree/notebooks/auto_examples/sensitivity/sobol/local_mechanical_oscillator_ODE.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: local_mechanical_oscillator_ODE.ipynb <local_mechanical_oscillator_ODE.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: local_mechanical_oscillator_ODE.py <local_mechanical_oscillator_ODE.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: local_mechanical_oscillator_ODE.zip <local_mechanical_oscillator_ODE.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
