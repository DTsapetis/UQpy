
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sampling/importance_sampling/plot_importance_sampling_rosenbrock.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sampling_importance_sampling_plot_importance_sampling_rosenbrock.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sampling_importance_sampling_plot_importance_sampling_rosenbrock.py:


Rosenbrock distribution
============================================

.. GENERATED FROM PYTHON SOURCE LINES 9-11

For importance sampling, the function must be written in a way that it can
evaluate multiple samples at once.

.. GENERATED FROM PYTHON SOURCE LINES 14-29

.. code-block:: Python


    from UQpy.distributions import Uniform, JointIndependent
    from UQpy.sampling import ImportanceSampling
    import time
    import matplotlib.pyplot as plt
    import numpy as np


    def log_Rosenbrock(x, param):
        return (-(100 * (x[:, 1] - x[:, 0] ** 2) ** 2 + (1 - x[:, 0]) ** 2) / param)


    proposal = JointIndependent([Uniform(loc=-8, scale=16), Uniform(loc=-10, scale=60)])
    print(proposal.get_parameters())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'loc_0': -8, 'scale_0': 16, 'loc_1': -10, 'scale_1': 60}




.. GENERATED FROM PYTHON SOURCE LINES 30-32

Run IS
-------

.. GENERATED FROM PYTHON SOURCE LINES 35-49

.. code-block:: Python


    t4 = time.time()

    w = ImportanceSampling(log_pdf_target=log_Rosenbrock, args_target=(20,), proposal=proposal, nsamples=10000)

    t_IS = time.time() - t4
    print(t_IS)

    w.resample(nsamples=1000)
    plt.plot(w.unweighted_samples[:, 0], w.unweighted_samples[:, 1], 'gs', alpha=0.2)
    print(w.unweighted_samples.shape)
    plt.legend(['IS'])
    plt.show()




.. image-sg:: /auto_examples/sampling/importance_sampling/images/sphx_glr_plot_importance_sampling_rosenbrock_001.png
   :alt: plot importance sampling rosenbrock
   :srcset: /auto_examples/sampling/importance_sampling/images/sphx_glr_plot_importance_sampling_rosenbrock_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.002198457717895508
    (1000, 2)




.. GENERATED FROM PYTHON SOURCE LINES 50-52

Run IS by adding samples: call the run method in a loop (one can also look at diagnostics)
----------------------------------------------------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-71

.. code-block:: Python


    t4 = time.time()

    w = ImportanceSampling(log_pdf_target=log_Rosenbrock, args_target=(20,), proposal=proposal)
    for nsamples in [5000, 5000, 5000, 5000]:
        w.run(nsamples)
        print(w.samples.shape)
        # IS_diagnostics(weights=w.weights, graphics=False)
    t_IS = time.time() - t4
    print(t_IS)

    w.resample(nsamples=1000)
    plt.plot(w.unweighted_samples[:, 0], w.unweighted_samples[:, 1], 'gs', alpha=0.2)
    plt.legend(['IS'])
    plt.show()




.. image-sg:: /auto_examples/sampling/importance_sampling/images/sphx_glr_plot_importance_sampling_rosenbrock_002.png
   :alt: plot importance sampling rosenbrock
   :srcset: /auto_examples/sampling/importance_sampling/images/sphx_glr_plot_importance_sampling_rosenbrock_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (5000, 2)
    (10000, 2)
    (15000, 2)
    (20000, 2)
    0.007807731628417969




.. GENERATED FROM PYTHON SOURCE LINES 72-74

Another example: sampling from a bivariate with copula dependence. Giving a random state enforces that results are
the same for repeatability.

.. GENERATED FROM PYTHON SOURCE LINES 77-88

.. code-block:: Python


    from UQpy.distributions import Normal, Gumbel, JointCopula

    dist_true = JointCopula(marginals=[Normal(), Normal()], copula=Gumbel(theta=2.))
    proposal1 = JointIndependent(marginals=[Normal(), Normal()])

    sampler = ImportanceSampling(log_pdf_target=dist_true.log_pdf, proposal=proposal1, random_state=123,
                                 nsamples=500)
    print(sampler.samples.shape)
    print(sampler.weights.shape)
    print(np.round(sampler.samples[-5:], 4))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    (500, 2)
    (500,)
    [[ 0.5679  0.6348]
     [ 0.513   1.0699]
     [-0.0269 -0.9093]
     [ 0.3116  0.4703]
     [-0.1421 -1.1114]]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.123 seconds)


.. _sphx_glr_download_auto_examples_sampling_importance_sampling_plot_importance_sampling_rosenbrock.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/SURGroup/UQpy/master?urlpath=lab/tree/notebooks/auto_examples/sampling/importance_sampling/plot_importance_sampling_rosenbrock.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_importance_sampling_rosenbrock.ipynb <plot_importance_sampling_rosenbrock.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_importance_sampling_rosenbrock.py <plot_importance_sampling_rosenbrock.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_importance_sampling_rosenbrock.zip <plot_importance_sampling_rosenbrock.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
