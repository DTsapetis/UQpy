
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/sampling/importance_sampling/plot_importance_sampling_diagnostics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_sampling_importance_sampling_plot_importance_sampling_diagnostics.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_sampling_importance_sampling_plot_importance_sampling_diagnostics.py:


Diagnostics for Importance Sampling
============================================

.. GENERATED FROM PYTHON SOURCE LINES 9-23

This notebook illustrates the use of some simple diagnostics for Importance Sampling. For IS, in extreme settings
only a few samples may have a significant weight, yielding poor approximations of the target pdf :math:`p(x)`. A popular
diagnostics is the Effective Sample Size (ESS), which is theoretically defined as the number of independent samples
generated directly form the target distribution that are required to obtain an estimator with same variance as the
one obtained from IS. Heuristically, ESS approximates how many i.i.d. samples, drawn from the target, are equivalent
to :math:`N` weighted samples drawn from the IS or MCMC approximation.

An approximation of the ESS is given by [1]:

.. math::  ESS = \frac{1}{\sum \tilde{w}^2}

where :math:`\tilde{w}` are the normalized weights.

[1] *Sequential Monte Carlo Methods in Practice*, A. Doucet, N. de Freitas, and N. Gordon, 2001, Springer, New York

.. GENERATED FROM PYTHON SOURCE LINES 24-39

.. code-block:: Python


    from UQpy.distributions import Uniform, JointIndependent
    from UQpy.sampling import ImportanceSampling
    import matplotlib.pyplot as plt
    import numpy as np

    def log_Rosenbrock(x, param):
        return (-(100 * (x[:, 1] - x[:, 0] ** 2) ** 2 + (1 - x[:, 0]) ** 2) / param)

    proposal = JointIndependent([Uniform(loc=-8, scale=16), Uniform(loc=-10, scale=60)])
    print(proposal.get_parameters())

    w = ImportanceSampling(log_pdf_target = log_Rosenbrock, args_target = (20,),
                           proposal = proposal, nsamples=5000)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'loc_0': -8, 'scale_0': 16, 'loc_1': -10, 'scale_1': 60}




.. GENERATED FROM PYTHON SOURCE LINES 40-42

Look at distribution of weights
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 45-56

.. code-block:: Python



    print('max_weight = {}, min_weight = {} \n'.format(max(w.weights), min(w.weights)))

    fig, ax = plt.subplots(figsize=(8, 3))
    ax.scatter(w.weights, np.zeros((np.size(w.weights),)), s=w.weights * 600, marker='o')
    ax.set_xlabel('weights')
    ax.set_title('Normalized weights out of importance sampling')
    ax.tick_params(which='both', left=False, labelleft=False)  # labels along the bottom edge are off
    plt.show()




.. image-sg:: /auto_examples/sampling/importance_sampling/images/sphx_glr_plot_importance_sampling_diagnostics_001.png
   :alt: Normalized weights out of importance sampling
   :srcset: /auto_examples/sampling/importance_sampling/images/sphx_glr_plot_importance_sampling_diagnostics_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    max_weight = 0.0405084838292173, min_weight = 0.0 





.. GENERATED FROM PYTHON SOURCE LINES 57-59

Compute the effective sample size
----------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 62-67

.. code-block:: Python


    effective_sample_size = 1. / np.sum(w.weights ** 2, axis=0)

    print('Effective sample size is ne={}, out of a total number of samples={} \n'.
          format(effective_sample_size, np.size(w.weights)))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Effective sample size is ne=46.933337068824166, out of a total number of samples=5000 






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.068 seconds)


.. _sphx_glr_download_auto_examples_sampling_importance_sampling_plot_importance_sampling_diagnostics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/SURGroup/UQpy/master?urlpath=lab/tree/notebooks/auto_examples/sampling/importance_sampling/plot_importance_sampling_diagnostics.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_importance_sampling_diagnostics.ipynb <plot_importance_sampling_diagnostics.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_importance_sampling_diagnostics.py <plot_importance_sampling_diagnostics.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_importance_sampling_diagnostics.zip <plot_importance_sampling_diagnostics.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
