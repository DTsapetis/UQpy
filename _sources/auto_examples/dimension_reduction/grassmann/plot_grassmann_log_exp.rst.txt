
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/dimension_reduction/grassmann/plot_grassmann_log_exp.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_dimension_reduction_grassmann_plot_grassmann_log_exp.py>`
        to download the full example code. or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_dimension_reduction_grassmann_plot_grassmann_log_exp.py:


Mappings to & from tangent space
==================================

This example shows how to use the UQpy Grassmann class to use the logarithmic map and the exponential map

.. GENERATED FROM PYTHON SOURCE LINES 10-12

Import the necessary libraries. Here we import standard libraries such as numpy and matplotlib, but also need to
import the Grassmann class from UQpy implemented in the DimensionReduction module.

.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    from UQpy.dimension_reduction import GrassmannOperations
    from UQpy.dimension_reduction.grassmann_manifold.projections.SVDProjection import SVDProjection








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Generate four random matrices with reduced rank corresponding to the different samples. The samples are stored in
`matrices`.

.. GENERATED FROM PYTHON SOURCE LINES 28-57

.. code-block:: Python


    D1 = 6
    r0 = 2  # rank sample 0
    r1 = 3  # rank sample 1
    r2 = 4  # rank sample 2
    r3 = 3  # rank sample 2

    np.random.seed(1111)  # For reproducibility.
    # Solutions: original space.
    Sol0 = np.dot(np.random.rand(D1, r0), np.random.rand(r0, D1))
    Sol1 = np.dot(np.random.rand(D1, r1), np.random.rand(r1, D1))
    Sol2 = np.dot(np.random.rand(D1, r2), np.random.rand(r2, D1))
    Sol3 = np.dot(np.random.rand(D1, r3), np.random.rand(r3, D1))

    # Creating a list of matrices.
    matrices = [Sol0, Sol1, Sol2, Sol3]

    # Plot the matrices
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4)
    ax1.title.set_text('Matrix 0')
    ax1.imshow(Sol0)
    ax2.title.set_text('Matrix 1')
    ax2.imshow(Sol1)
    ax3.title.set_text('Matrix 2')
    ax3.imshow(Sol2)
    ax4.title.set_text('Matrix 3')
    ax4.imshow(Sol3)
    plt.show()




.. image-sg:: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_001.png
   :alt: Matrix 0, Matrix 1, Matrix 2, Matrix 3
   :srcset: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 58-59

Instantiate the UQpy class Grassmann.

.. GENERATED FROM PYTHON SOURCE LINES 62-77

.. code-block:: Python


    manifold_projection = SVDProjection(matrices, p="max")

    # Plot the points on the Grassmann manifold defined by the left singular eigenvectors.
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4)
    ax1.title.set_text('Matrix 0')
    ax1.imshow(manifold_projection.u[0].data)
    ax2.title.set_text('Matrix 1')
    ax2.imshow(manifold_projection.u[0].data)
    ax3.title.set_text('Matrix 2')
    ax3.imshow(manifold_projection.u[0].data)
    ax4.title.set_text('Matrix 3')
    ax4.imshow(manifold_projection.u[0].data)
    plt.show()




.. image-sg:: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_002.png
   :alt: Matrix 0, Matrix 1, Matrix 2, Matrix 3
   :srcset: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 78-79

Project :math:`\Psi`, the left singular eigenvectors, on the tangent space centered at :math:`\Psi_0`.

.. GENERATED FROM PYTHON SOURCE LINES 82-103

.. code-block:: Python


    points_tangent = GrassmannOperations.log_map(grassmann_points=manifold_projection.u,
                                                 reference_point=manifold_projection.u[0])

    print(points_tangent[0])
    print(points_tangent[1])
    print(points_tangent[2])
    print(points_tangent[3])

    # Plot the matrices
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4)
    ax1.title.set_text('Matrix 0')
    ax1.imshow(points_tangent[0])
    ax2.title.set_text('Matrix 1')
    ax2.imshow(points_tangent[1])
    ax3.title.set_text('Matrix 2')
    ax3.imshow(points_tangent[2])
    ax4.title.set_text('Matrix 3')
    ax4.imshow(points_tangent[3])
    plt.show()




.. image-sg:: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_003.png
   :alt: Matrix 0, Matrix 1, Matrix 2, Matrix 3
   :srcset: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[ 4.44089210e-16 -2.22044605e-16 -2.22044605e-16 -3.88578059e-16]
     [ 1.48121263e-31 -9.74848798e-32 -2.77555756e-16  3.33066907e-16]
     [ 4.16333634e-17 -5.55111512e-17  1.11022302e-16 -1.73472348e-17]
     [ 1.11022302e-16 -1.11022302e-16 -1.04056669e-31  8.88178420e-16]
     [ 1.11022302e-16 -1.11022302e-16  8.32667268e-17 -6.66133815e-16]
     [ 1.11022302e-16 -5.55111512e-17  2.22044605e-16 -1.52655666e-16]]
    [[-0.00289972  0.02940501 -0.06692524 -0.00799253]
     [ 0.00455712 -0.26515178  0.67732875  0.22752485]
     [ 0.09689065 -0.51255794  1.00804947 -0.19438032]
     [-0.00312777  0.16973559 -0.43286845 -0.14413289]
     [ 0.00987154  0.11548807 -0.33556779 -0.18446793]
     [-0.04450886 -0.06531477  0.32292567  0.38460091]]
    [[ 0.01257495  0.03558027 -0.02763244 -0.05552352]
     [-0.09156837 -0.2842928   0.18309812  0.52030722]
     [-0.2660385  -0.69864148  0.62348617  0.92567249]
     [ 0.05882985  0.18234499 -0.11785367 -0.33288055]
     [ 0.0278989   0.1037574  -0.04346657 -0.23740691]
     [ 0.02356688  0.00720386 -0.09453735  0.16967396]]
    [[ 0.00248432  0.01973523  0.04263569 -0.00131084]
     [ 0.0879491  -0.03614681 -0.74282117 -0.06430289]
     [-0.28018279 -0.64841374  0.02608395  0.1862546 ]
     [-0.05522403  0.02452215  0.47201846  0.04042082]
     [-0.09890625 -0.06213183  0.52033699  0.0698107 ]
     [ 0.25489227  0.29081381 -0.94038837 -0.17672667]]




.. GENERATED FROM PYTHON SOURCE LINES 104-105

Map the points back to the Grassmann manifold.

.. GENERATED FROM PYTHON SOURCE LINES 108-122

.. code-block:: Python


    points_grassmann = GrassmannOperations.exp_map(tangent_points=points_tangent,
                                                   reference_point=manifold_projection.u[0])

    # Plot the matrices
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4)
    ax1.title.set_text('Matrix 0')
    ax1.imshow(points_grassmann[0].data)
    ax2.title.set_text('Matrix 1')
    ax2.imshow(points_grassmann[1].data)
    ax3.title.set_text('Matrix 2')
    ax3.imshow(points_grassmann[2].data)
    ax4.title.set_text('Matrix 3')
    ax4.imshow(points_grassmann[3].data)
    plt.show()


.. image-sg:: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_004.png
   :alt: Matrix 0, Matrix 1, Matrix 2, Matrix 3
   :srcset: /auto_examples/dimension_reduction/grassmann/images/sphx_glr_plot_grassmann_log_exp_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.421 seconds)


.. _sphx_glr_download_auto_examples_dimension_reduction_grassmann_plot_grassmann_log_exp.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/SURGroup/UQpy/master?urlpath=lab/tree/notebooks/auto_examples/dimension_reduction/grassmann/plot_grassmann_log_exp.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_grassmann_log_exp.ipynb <plot_grassmann_log_exp.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_grassmann_log_exp.py <plot_grassmann_log_exp.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_grassmann_log_exp.zip <plot_grassmann_log_exp.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
