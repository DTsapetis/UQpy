
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/dimension_reduction/grassmann_dmaps.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_dimension_reduction_grassmann_dmaps.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_dimension_reduction_grassmann_dmaps.py:


Grassmannian diffusion maps
=====================

This example shows how to use the UQpy DiffusionMaps class for points on the Grassmann
manifold. Reference [gdmaps]

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt
    from UQpy.dimension_reduction import DiffusionMaps, ProjectionKernel, SvdProjection


.. GENERATED FROM PYTHON SOURCE LINES 17-18

Sample points randomly following a parametric curve and plot the 3D graphic.

.. GENERATED FROM PYTHON SOURCE LINES 21-39

.. code-block:: default


    n = 4000  # number of samples


    # instantiate a diffusion maps object.
    # Use a Gaussian kernel
    kernel = ProjectionKernel()

    # ------------------------------------------------------------------------------------------
    # Case 1: Find the optimal parameter of the Gaussian kernel scale epsilon

    gdmaps_object = DiffusionMaps(alpha=1.0, eigenvectors_number=9,
                                  kernel=kernel)


    # Fit the data and calculate the embedding, the eigenvectors and eigenvalues
    diff_coords, eigenvalues, eigenvectors = gdmaps_object.fit(X)


.. GENERATED FROM PYTHON SOURCE LINES 40-41

Plot the Grassmannian diffusion coordinates

.. GENERATED FROM PYTHON SOURCE LINES 42-61

.. code-block:: default


    figure_params = dict(figsize=[10, 10])
    n_eigenvectors = eigenvectors.shape[1] - 1

    f, ax = plt.subplots(
        nrows=int(np.ceil(n_eigenvectors / 2)), ncols=2, sharex=True, sharey=True, **figure_params)
    enum = 0

    for i, idx in enumerate(range(n_eigenvectors + 1)):
        if i == 1:
            enum = 1
        else:
            i = i - enum

        _ax = ax[i // 2, i - (i // 2) * 2]
        _ax.scatter( diff_coords[:, 1], diff_coords[:, idx], cmap=plt.cm.Spectral, c=X_color)

        _ax.set_title(r"$\Psi_{{{}}}$ vs. $\Psi_{{{}}}$".format(1, idx))


.. GENERATED FROM PYTHON SOURCE LINES 62-64

Find the parsimonious representation of the eigenvectors. Identify the two most informative
eigenvectors.

.. GENERATED FROM PYTHON SOURCE LINES 65-69

.. code-block:: default


    index, residuals = DiffusionMaps.parsimonious(eigenvectors, 2)

    print('most informative eigenvectors:', index)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_dimension_reduction_grassmann_dmaps.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: grassmann_dmaps.py <grassmann_dmaps.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: grassmann_dmaps.ipynb <grassmann_dmaps.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
