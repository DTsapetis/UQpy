name: Package & Release

on:
  push:
    branches:
      - master

permissions:                            
  id-token: write
  contents: write

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build PyPI package
        runs-on: ubuntu-latest
        outputs:
          version: ${{ steps.get_version.outputs.version }}
        steps:
        - name: Checkout Code
          uses: actions/checkout@v4
          with:
            fetch-depth: 0 

        - name: Install .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: '8.x'

        - name: Install GitVersion as .NET tool
          run: |
            dotnet tool install --global GitVersion.Tool --version 5.*
            dotnet tool list -g
            dotnet-gitversion /version          

        - name: Run GitVersion
          id: get_version
          run: |
            dotnet-gitversion /config GitVersion.yml
            VERSION=$(dotnet-gitversion /showvariable MajorMinorPatch)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_OUTPUT

        - name: Use env variable
          run: echo "GitVersion VERSION = $VERSION"

        - name: Update pyproject.toml with version  
          run: |
            echo "Replacing version with $VERSION in pyproject.toml"
            sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml
            cat pyproject.toml
            
        - name: Set up Python 3.12
          uses: actions/setup-python@v5
          with:
            python-version: '3.12'
            cache: 'pip'

        - name: Install build tools
          run: python -m pip install --upgrade build twine

        - name: Build package
          run: |
            python -m build -s -w -v

        - name: Check package validity
          run: twine check dist/*

        - name: Install sigstore
          run: pip install sigstore

        - name: Sign .whl file
          run: |
            sigstore sign dist/*.whl
            sigstore sign dist/*.tar.gz

        - name: Generate SHA256 checksums
          run: |
            sha256sum dist/* > dist/sha256sums.txt
            cat dist/sha256sums.txt
            cd dist
            ls -la
            cd ..

        # - name: Upload signatures
        #   uses: actions/upload-artifact@v4
        #   with:
        #     name: signed-artifacts
        #     path: |
        #       dist/*.sig
        #       dist/*.crt
        
        - name: Upload package artifact
          uses: actions/upload-artifact@v4
          with:
            name: built-dist
            path: dist/
    

    build-docker-image:
        name: Build Docker Image
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4
          
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
  
          - name: Build and save Docker image
            run: |
              docker build -t test-uqpy:latest .
              docker save test-uqpy:latest -o test-uqpy.tar
              

    wait-for-approval:
          name: Await Manual Approval
          runs-on: ubuntu-latest
          needs: [build, build-docker-image]
          environment:
            name: production
          steps:
            - name: Manual approval gate
              run: echo "Waiting for approval..."   

    upload-gihub-release:
          name: Upload GitHub Release
          runs-on: ubuntu-latest
          needs: [wait-for-approval, build]
          env:
            GH_TOKEN: ${{ github.token }}
            VERSION: ${{ needs.build.outputs.version }}
          steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-dist
                path: dist
            - name: Check if version exists
              run: echo "GitVersion VERSION = $VERSION"
                
            # - name: Github Release
            #   uses: softprops/action-gh-release@v2
            #   with:
            #     tag_name: ${{ env.VERSION }}
            #     files: |
            #       dist/*

    upload-python-package:
          name: Upload Python package
          runs-on: ubuntu-latest
          needs: [wait-for-approval]
          steps:              
            - name: Checkout Code
              uses: actions/checkout@v4
              
            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                python-version: '3.12'
    
            - name: Install build tools
              run: python -m pip install --upgrade twine

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                name: built-dist
                path: dist
              
            # - name: Upload to TestPyPI
            #   env: 
            #     TWINE_USERNAME: ${{secrets.TEST_PYPI_USERNAME}}
            #     TWINE_PASSWORD: ${{secrets.TEST_PYPI_TOKEN}}
            #   run: |
            #     ls -la
            #     python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*.whl dist/*.tar.gz --verbose
                
    upload-docker-image:
          name: Upload to Github Container Registry 
          runs-on: ubuntu-latest
          needs: [wait-for-approval]
          permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write
          env:
            REGISTRY: ghcr.io
            IMAGE_NAME: testuqpy
          steps: 
            - uses: actions/checkout@v4
            
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
                
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@V5
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v2
              with:
                subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
                subject-digest: ${{ steps.push.outputs.digest }}
                push-to-registry: true
                
    upload-to-dockerhub:
          name: Upload to Dockerhub 
          runs-on: ubuntu-latest
          needs: [wait-for-approval]
          permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write
          env:
            REGISTRY: ghcr.io
            IMAGE_NAME: testuqpy
          steps: 
            - uses: actions/checkout@v4
            
            - name: Log in to the Container registry
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                context: .
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}

            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v2
              with:
                subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
                subject-digest: ${{ steps.push.outputs.digest }}
                push-to-registry: true


                
          
